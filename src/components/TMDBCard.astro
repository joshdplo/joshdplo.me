---
import { META } from "@constants";
import { Image } from "astro:assets";
const { data } = Astro.props;
const movieData = data.data;
const movieId = data.id;

const imagesGlob = import.meta.glob("@slurpi/public/images/tmdb/*.jpg");
const img =
  imagesGlob[
    Object.keys(imagesGlob).filter(
      (k) =>
        k.split("/")[k.split("/").length - 1].replace(".jpg", "") === movieId,
    )[0]
  ]();

// Helpers
const isMovie = movieData.release_date;
const title = movieData.title || movieData.name;
const released = (movieData.release_date || movieData.first_air_date).split(
  "-",
)[0];
const favorite = movieData.rating !== null;
const mega = movieData.mega;
const genreIds = JSON.parse(movieData.genre_ids);
const genresMap = META[isMovie ? "tmdbMovieGenres" : "tmdbTvGenres"];
---

<div class="card" class:list={[{ mega }, { favorite }]}>
  <Image
    src={img}
    alt={`poster for ${title}`}
    width="200"
    height="300"
    loading="lazy"
  />
  <div class="info">
    <div class="title">
      <span>{title}</span>
      <i>{`${released} - ${movieData.original_language}`}</i>
    </div>
    <div class="overview">
      {movieData.overview}
    </div>
    <div class="bottom">
      <span class="genres">
        {genreIds.map((id) => <span>{genresMap[`${id}`]}</span>)}
      </span>
      <a
        href={`https://www.themoviedb.org/${isMovie ? "movie" : "tv"}/${movieId}`}
        >Go to TMDB</a
      >
    </div>
  </div>
</div>

<style lang="scss">
  @use "@css/util";

  .card {
    --img-width: 150px;
    --img-height: 225px;

    position: relative;
    display: grid;
    grid-template-columns: 150px 1fr;
    flex-wrap: nowrap;
    background-color: var(--font-color-opposite);
  }

  img {
    width: var(--img-width);
    height: var(--img-height);
    box-shadow: 0px 0px 12px 0px rgba(0, 0, 0, 0.5);
    z-index: 2;
  }

  .info {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 0.55rem;
    border: 3px double var(--content-subtle);
    border-left: 0;
  }

  .title {
    display: flex;
    flex-direction: column;
    gap: 0.2rem;
    font-size: 1.1rem;
    line-height: 1;

    span {
      font-size: 1rem;
      line-height: 1;
      font-weight: bold;
    }
  }

  .overview {
    position: relative;
    font-size: 0.9rem;
    padding: 0.3rem 0;
    line-height: 1.3;
    max-height: 4rem;
    overflow-y: scroll;
    margin-top: auto;
    border: 1px solid var(--content-subtle);
    border-left: 0;
    border-right: 0;
  }

  .bottom {
    margin-top: auto;
  }

  .genres {
    position: relative;
    display: flex;
    flex-wrap: wrap;
    line-height: 1;
    font-size: 0.8rem;
    gap: 0.1rem;
    margin-bottom: 0.35rem;

    span {
      padding: 0.2rem;
      background-color: var(--background);
    }
  }

  a {
    display: flex;
    justify-content: center;
    padding: 0 0.4rem;
    font-size: 1rem;
    text-decoration: none;
    background-color: var(--font-color);
    color: var(--font-color-opposite);
  }

  .favorite::before,
  .mega::before {
    content: "\2606";
    position: absolute;
    top: 0.3rem;
    right: 0.3rem;
    font-size: 1.5rem;
    line-height: 1;
    color: var(--c-theme-gold);
    text-shadow: 0.03em 0.05em 0 var(--font-color);
  }
  .mega::before {
    content: "\2605";
  }
</style>

---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { SITE } from "@constants";
import { getCollectionItemLink } from "@util";
const { data, mini } = Astro.props;
const itemData = data.data;
const appid = data.data.appid;

const imagesGlob = import.meta.glob("@slurpi/public/images/steam/*.jpg");
const img =
  imagesGlob[
    Object.keys(imagesGlob).filter(
      (k) =>
        k.split("/")[k.split("/").length - 1].replace(".jpg", "") ===
        "" + appid,
    )[0]
  ]();
const platforms = JSON.parse(itemData.platforms);
const developers = JSON.parse(itemData.developers);
const genres = JSON.parse(itemData.genres);
const categories = JSON.parse(itemData.categories);

const allItems = await getCollection("games");
let itemIndex;
let invalidItems = 0;
allItems.forEach((item, idx) => {
  if (item.data.invalid) invalidItems++;
  if (item.data.appid === appid) itemIndex = idx;
});
const itemLink = !mini
  ? null
  : getCollectionItemLink(
      appid,
      itemIndex - invalidItems,
      SITE.GAMES_PER_PAGE,
      "games",
    );
---

{
  !mini && (
    <div class="card" data-game-id={appid}>
      <div class="info">
        <div class="top">
          <Image
            src={img}
            alt={`art for ${itemData.name}`}
            width="231"
            height="87"
            loading="lazy"
          />
          <div class="title-area">
            <div class="title">{itemData.name}</div>
            <div class="os">
              {platforms.windows && (
                <img
                  src="/images/windows.png"
                  alt="windows logo"
                  loading="lazy"
                />
              )}
              {platforms.mac && (
                <img src="/images/mac.png" alt="apple logo" loading="lazy" />
              )}
              {platforms.linux && (
                <img src="/images/linux.png" alt="linux logo" loading="lazy" />
              )}
            </div>
            <div class="released">
              Released {JSON.parse(itemData.release_date).date}
            </div>
            <a
              href={`https://store.steampowered.com/app/${appid}`}
              class="link"
              data-link
            >
              Steam Page
            </a>
          </div>
        </div>
        <div class="description">
          {itemData.short_description
            .replaceAll("&amp;", "&")
            .replaceAll("&quot;", '"')}
        </div>
        <div class="developers">
          Developed by {developers && developers.map((d) => <span>{d}</span>)}
        </div>
        <div class="genres">
          {genres && genres.map((g) => <span>{g.description}</span>)}
          {categories &&
            categories
              .filter(
                (c) =>
                  c.description.toLowerCase().includes("player") ||
                  c.description.toLowerCase().includes("co-op"),
              )
              .map((c) => <span>{c.description}</span>)}
        </div>
        <div class="hide" data-details>
          {genres && genres.map((g) => g.description).join(", ")}
        </div>
      </div>
    </div>
  )
}

{
  mini && (
    <a
      class="card-mini"
      href={`https://store.steampowered.com/app/${appid}`}
      title={itemData.name}
    >
      <Image
        src={img}
        alt={`art for ${itemData.name}`}
        width="231"
        height="87"
        loading="lazy"
      />
    </a>
  )
}

<style lang="scss">
  @use "@css/util";

  .card {
    --img-width: 231px;

    position: relative;
    display: grid;
    grid-template-columns: 1fr;
    gap: 0.6rem;
    justify-content: center;
    text-decoration: none;
    padding-bottom: 0.8rem;
    border-bottom: 1px dotted var(--content-subtle);

    &::after {
      display: none;
    }
  }

  img {
    display: block;
  }

  a {
    font-size: 1rem;
  }

  .info {
    position: relative;
    display: flex;
    flex-direction: column;
    font-size: 1rem;
    line-height: 1.2;
  }

  .top {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 0.7rem;
    margin-bottom: 0.7rem;

    @include util.mq(sm) {
      flex-direction: row;
    }
  }

  .title {
    font-size: 1rem;
    font-weight: bold;
  }

  .os {
    display: inline-flex;
    background-color: var(--c-theme-light);
    margin: 0.1em auto 0.2em 0;
    gap: 4px;
    height: 18px;
    padding: 3px;

    img {
      display: inline-block;
      width: 12px;
      height: 12px;
    }
  }

  .developers {
    position: relative;
    display: flex;
    flex-wrap: wrap;
    gap: 0.3em;
    margin-bottom: 0.1rem;
    font-size: 0.9rem;

    span::after {
      content: ", ";
    }

    span:last-child::after {
      content: none;
    }
  }

  .genres {
    display: flex;
    flex-wrap: wrap;
    gap: 0.15rem;
    font-size: 0.75rem;

    span {
      &::after {
        position: relative;
        content: ",";
        // margin-left: 0.15rem;
      }
      &:last-child::after {
        content: none;
      }
    }
  }

  .link,
  .description {
    margin-bottom: 0.7rem;
  }

  .card-mini {
    box-shadow: 0px 0px 18px 0px transparent;
    transition: 0.1s ease-out;

    &::after {
      display: none;
    }

    &:hover,
    &:focus-visible {
      transform: scale(1.1);
      z-index: 2;
      box-shadow: 0px 0px 18px 0px rgba(0, 0, 0, 0.45);
    }

    img {
      width: 225px;
      height: 85px;
    }
  }
</style>

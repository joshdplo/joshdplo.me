---
import { SITE } from "@constants";
import { getCollectionItemLink, getEmojiFromCategory } from "@util";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
const { category, itemId, text } = Astro.props;

// set up data based on category and id
let imagesGlob;
let collectionName = category === "bands" ? "artists" : category;
if (category === "movies" || category === "shows") {
  imagesGlob = import.meta.glob("@slurpi/public/images/tmdb/*.jpg");
}
if (category === "bands" || category === "songs") {
  imagesGlob = import.meta.glob("@slurpi/public/images/spotify/*.jpg");
}
if (category === "games") {
  imagesGlob = import.meta.glob("@slurpi/public/images/steam/*.jpg");
}
if (category === "radio") {
  collectionName = "radioStations";
  imagesGlob = import.meta.glob("@slurpi/public/images/radio/*.jpg");
}

// get image
const img =
  imagesGlob[
    Object.keys(imagesGlob).filter(
      (k) =>
        k.split("/")[k.split("/").length - 1].replace(".jpg", "") === itemId,
    )[0]
  ]();

// get collection
const allItems = await getCollection(collectionName);

// get item link
let itemIndex;
let difference = 0;
allItems.forEach((i, idx) => {
  if (collectionName === "games" && i.data.invalid) difference++;
  if ("" + i.data?.appid === itemId || i.id === itemId) itemIndex = idx;
});
itemIndex = itemIndex - difference;
const getItemsPerPage = () => {
  if (category === "movies" || category === "shows")
    return SITE.MOVIES_PER_PAGE;
  if (category === "songs" || category === "bands" || category === "radio")
    return SITE.MUSIC_PER_PAGE;
  if (category === "games") return SITE.GAMES_PER_PAGE;
};
const itemLink = getCollectionItemLink(
  itemId,
  itemIndex,
  getItemsPerPage(),
  category,
);

// Item Details
const rawItem = allItems.filter((i) => {
  if (category === "games") return "" + i.data?.appid === itemId;
  return i.id === itemId;
});
const item = rawItem[0].data;

const title = item.name || item.title;

const subtext = () => {
  switch (category) {
    case "movies":
    case "shows":
      return `(${(item.release_date || item.first_air_date).split("-")[0]})`;
    case "songs":
      return `(${item.release_date.split("-")[0]}) by ${JSON.parse(item.artists)
        .map((a) => a.name)
        .join(", ")}`;
    case "bands":
    case "radio":
      return `${JSON.parse(item.genres).join(", ")}`;
    case "games":
      return `(${
        JSON.parse(item.release_date).date.split(" ")[
          JSON.parse(item.release_date).date.split(" ").length - 1
        ]
      })`;
  }
};

const serviceName = () => {
  switch (category) {
    case "movies":
    case "shows":
      return "TMDB";
    case "songs":
    case "bands":
      return "Spotify";
    case "games":
      return "Steam";
    case "radio":
      return "Radio";
    default:
      return null;
  }
};

const serviceUrl = () => {
  switch (category) {
    case "movies":
    case "shows":
      return `https://www.themoviedb.org/${category === "movies" ? "movie" : "tv"}/${itemId}`;
    case "songs":
    case "bands":
    case "radio":
      return item.url;
    case "games":
      return `https://store.steampowered.com/app/${item?.appid}`;
    default:
      return null;
  }
};
---

<div class:list={["collection-item", category]}>
  <div class="img">
    <Image src={img} alt={`${title}`} loading="lazy" />
  </div>
  <div class="details">
    <span class="category"
      >{getEmojiFromCategory(category)}
      {
        category !== "radio"
          ? category.substring(0, category.length - 1)
          : category
      }
    </span>
    <span class="title">{title}</span>
    {subtext() && <span class="subtext">{subtext()}</span>}
    <i class="text">{text}</i>
    <div class="links">
      <a href={serviceUrl()}>{serviceName()} Page</a>
      <a href={itemLink}>View in Likes</a>
    </div>
  </div>
</div>

<style lang="scss">
  @use "@css/util";

  .collection-item {
    --img-width: 200px;
    --img-width-game: 231px;
    --border-radius: 6px;

    position: relative;
    display: flex;
    flex-direction: column;
    line-height: 1.1;
    border: 3px solid var(--content-subtle);
    padding: 0.7rem;
    border-radius: 0.15rem;
    margin: 1rem auto;

    .img {
      align-self: center;
    }

    img {
      max-width: var(--img-width);
      width: 100%;
      height: auto;
      z-index: 0;
      margin: 0 auto 0.5rem auto;
    }

    &.games img {
      max-width: var(--img-width-game);
    }

    @media (max-width: 500px) {
      &.movies img,
      &.shows img {
        width: 150px;
      }
    }

    @include util.mq(sm) {
      display: grid;
      grid-template-columns: 1.2fr 0.8fr;
      align-items: center;

      .details {
        order: -1;
      }

      .img {
        margin-left: auto;
      }
    }
  }

  .details {
    position: relative;
    display: flex;
    flex-direction: column;
    margin-top: 1rem;
    z-index: 1;

    @include util.mq(sm) {
      min-width: 115px;
      padding-right: 2rem;
      margin-top: 0;
    }
  }

  .category {
    text-transform: uppercase;
    font-size: 0.75rem;
    padding: 0.25rem;
    border-left: 3px solid var(--c-secondary);
    margin: 0 auto 0.5rem 0;
  }

  .title {
    font-size: 2.2rem;
  }

  .subtext {
    padding-left: 0.1em;
    font-size: 1rem;
  }

  .text {
    padding: 1.2rem 0;
  }

  .links {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 0.6rem;

    a {
      font-size: 1rem;
      padding: 0.3rem 0.5rem;
      background-color: var(--font-color);
      color: var(--font-color-opposite);
      border-radius: 3px;
      line-height: 1;
      text-align: center;

      &:last-child {
        background-color: var(--c-secondary);
        color: var(--c-black);
      }
    }

    @include util.mq(sm) {
      margin: auto auto 0 0;
    }
  }
</style>

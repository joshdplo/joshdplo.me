---
import BaseLayout from "@layouts/BaseLayout.astro";
import HeroText from "@components/HeroText.svelte";
import PageMenu from "@components/PageMenu.astro";

const {
  pageTitle = "EMPTY",
  heroText = "NULL",
  heroDescenders = false,
  heroSubtext = null,
  pageMenuLinks = [],
  currentPage = null,
} = Astro.props;
---

<script>
  document.addEventListener("DOMContentLoaded", () => {
    function removeSearched() {
      document.body.classList.remove("searched");
    }

    function scrollToSearch() {
      const urlSearchParams = new URLSearchParams(window.location.search);
      if (urlSearchParams.size === 0) return;

      const params = Object.fromEntries(urlSearchParams.entries());
      if (!params.search || params.search === "") return;
      if (!params.cat || params.cat === "") return;

      const el = document.querySelector(
        `[data-${params.cat}-id="${params.search}"]`,
      );

      if (!el) return;

      el.classList.add("searched");
      document.body.classList.add("searched");

      window.addEventListener("click", () => removeSearched(), { once: true });
      window.addEventListener("touchmove", () => removeSearched(), {
        once: true,
      });
      window.addEventListener("keydown", () => removeSearched(), {
        once: true,
      });
      window.addEventListener("touchdown", () => removeSearched(), {
        once: true,
      });
      el.addEventListener("mouseleave", () => removeSearched(), { once: true });

      el.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }

    scrollToSearch();
  });
</script>

<BaseLayout {pageTitle}>
  <section class="contain">
    <div class="center-full">
      <HeroText
        text={heroText}
        subtext={heroSubtext}
        hasDescenders={heroDescenders}
      />
    </div>
    {
      pageMenuLinks.length > 0 && (
        <PageMenu links={pageMenuLinks} {currentPage} />
      )
    }
  </section>
  <slot />
</BaseLayout>

<style lang="scss">
  :global(.card) {
    transition: opacity 0.55s ease-in-out;
  }

  body.searched {
    :global(.card) {
      position: relative;
      opacity: 0.3;

      &.searched {
        opacity: 1;
      }
    }
  }
</style>
